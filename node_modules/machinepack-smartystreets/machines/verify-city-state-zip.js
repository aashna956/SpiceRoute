module.exports = {
  friendlyName: 'Verify City State Zip',
  description: 'Look up and verify city, state, and ZIP Code combinations',
  extendedDescription: 'Read the docs here: https://smartystreets.com/docs/city-state-zip.  Each combination of city/state or ZIP is accepted, except for city alone.',
  inputs: {
    authId: {
      required: true,
      example: 'ffffffff-1111-37f9-aaa2-abcdefghijkl',
      description: 'Your SmartyStreet Auth ID',
      whereToGet: {
        url: 'https://smartystreets.com/account#keys',
        description: '',
        extendedDescription: ''
      }
    },
    authToken: {
      required: true,
      example: 'ljadfolaj2lkjasdiosadfhlksdalkdasjfsdlkfjklsjf8yoihaksdfh/USDF',
      description: 'Your SmartyStreet Auth Token',
      whereToGet: {
        url: 'https://smartystreets.com/account#keys',
        description: '',
        extendedDescription: ''
      }
    },
    city: {
      example: 'Doylestown',
      description: 'The city name',
      extendedDescription: 'You must provide a ZIP code and/or a city/state combination.  You cannot provide city alone.'
    },
    state: {
      example: 'PA or Pennsylvania',
      description: 'The state name or abbreviation'
    },
    zipcode: {
      example: '18901',
      description: 'The 5-digit ZIP Code'
    },
    input_id: {
      example: 'address-123',
      description: 'A unique identifier for this address used in your application; this field will be copied into the output.'
    }
  },
  defaultExit: 'success',
  exits: {
    error: {
      description: 'Unexpected error occurred.'
    },
    missingParams: {
      description: 'You must provide a ZIP code and/or City/State combination'
    },
    cityAlone: {
      description: 'You cannot just provide a city'
    },
    blank: {
      description: 'Blank lookup (you must provide a ZIP code and/or City/State combination'
    },
    invalidState: {
      description: 'Invalid State name or abbreviation.'
    },
    invalidCity: {
      description: 'Invalid City for the given State.'
    },
    invalidZipcode: {
      description: 'Invalid ZIP Code'
    },
    conflict: {
      description: 'Conflicting ZIP Code/City/State information'
    },
    success: {
      description: 'Done.'
    }
  },
  fn: function(inputs, exits) {
    var Http = require('machinepack-http');

    if (!inputs.city && !inputs.state && !inputs.zipcode) {
      return exits.missingParams();
    }
    if (inputs.city && (!inputs.state && !inputs.zipcode)) {
      return exits.cityAlone();
    }

    var city = inputs.city || '';
    var state = inputs.state || '';
    var zipcode = inputs.zipcode || '';

    Http.sendHttpRequest({
      url: 'https://api.smartystreets.com/zipcode',
      method: 'get',
      params: {
        'auth-id': inputs.authId,
        'auth-token': inputs.authToken,
        input_id: inputs.input_id,
        city: inputs.city || '',
        state: inputs.state || '',
        zipcode: inputs.zipcode || ''
      },
      headers: {
        'Content-Type': 'application/json'
      }
    }).exec({
      // An unexpected error occurred.
      error: function(err) {
        return exits.error(err);
      },
      // 404 status code returned from server
      notFound: function(result) {
        return exits.error(result);
      },
      // 400 status code returned from server
      badRequest: function(result) {
        return exits.error(result);
      },
      // 403 status code returned from server
      forbidden: function(result) {
        return exits.error(result);
      },
      // 401 status code returned from server
      unauthorized: function(result) {
        return exits.error(result);
      },
      // 5xx status code returned from server (this usually means something went wrong on the other end)
      serverError: function(result) {
        return exits.error(result);
      },
      // Unexpected connection error: could not send or receive HTTP request.
      requestFailed: function() {
        return exits.error('Unexpected connection error; could not send or receive HTTP request.');
      },
      // OK.
      success: function(result) {
        var json = JSON.parse(result.body);
        console.log(json[0]);
        // Input that doesn't yield a match is returned with a status and reason:
        if (json[0].status || json[0].reason) {
          var status = json[0].status;
          var reason = json[0].reason;
          switch (status) {
            case 'blank':
              return exits.blank(json);
              break;
            case 'invalid_state':
              return exits.invalidState(json);
              break;
            case 'invalid_city':
              return exits.invalidCity(json);
              break;
            case 'invalid_zipcode':
              return exits.invalidZipcode(json);
              break;
            case 'conflict':
              return exits.conflict(json);
              break;
          }
        }
        return exits.success(json);
      }
    });
  }

};
