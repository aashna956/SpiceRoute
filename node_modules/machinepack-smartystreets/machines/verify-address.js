module.exports = {
  friendlyName: 'Verify Address',
  description: 'Verify one or more addresses using the SmartyStreets API',
  extendedDescription: 'Read the docs here: https://smartystreets.com/docs/address',
  inputs: {
    authId: {
      required: true,
      example: 'ffffffff-1111-37f9-aaa2-abcdefghijkl',
      description: 'Your SmartyStreet Auth ID',
      whereToGet: {
        url: 'https://smartystreets.com/account#keys',
        description: '',
        extendedDescription: ''
      }
    },
    authToken: {
      required: true,
      example: 'ljadfolaj2lkjasdiosadfhlksdalkdasjfsdlkfjklsjf8yoihaksdfh/USDF',
      description: 'Your SmartyStreet Auth Token',
      whereToGet: {
        url: 'https://smartystreets.com/account#keys',
        description: '',
        extendedDescription: ''
      }
    },
    input_id: {
      example: 'address-123',
      description: 'A unique identifier for this address used in your application; this field will be copied into the output.'
    },
    street: {
      required: true,
      example: '123 Main Street',
      description: 'The street line of the address, or an entire address'
    },
    street2: {
      example: 'North',
      description: 'Any extra address information'
    },
    secondary: {
      example: 'Suite 2A',
      description: 'Apartment, suite, or office number'
    },
    city: {
      example: 'Doylestown',
      description: 'The city name'
    },
    state: {
      example: 'PA or Pennsylvania',
      description: 'The state name or abbreviation'
    },
    zipcode: {
      example: '18901',
      description: 'The ZIP Code'
    },
    lastline: {
      example: 'Doylestown, PA 18901',
      description: 'City, state, and ZIP Code combined'
    },
    addressee: {
      example: 'Jane Doe',
      description: 'The name of the recipient, firm, or company at this address'
    },
    urbanization: {
      example: 'San Juan',
      description: 'Only used in Puerto Rico'
    },
    candidates: {
      example: '1, 5, or 10 (max value)',
      description: 'The maximum number of valid addresses returned when the input is ambiguous',
      extendedDescription: 'The max value is 10.'
    }
  },
  defaultExit: 'success',
  exits: {
    error: {
      description: 'An error occurred.'
    },

    success: {
      description: 'Done.'
    }
  },
  fn: function(inputs, exits) {
    var Http = require('machinepack-http');

    Http.sendHttpRequest({
      url: 'https://api.smartystreets.com/street-address',
      method: 'get',
      params: {
        'auth-id': inputs.authId,
        'auth-token': inputs.authToken,
        input_id: inputs.input_id,
        street: inputs.street,
        street2: inputs.street2 || '',
        secondary: inputs.secondary || '',
        city: inputs.city || '',
        state: inputs.state || '',
        zipcode: inputs.zipcode || '',
        lastline: inputs.lastline || '',
        addressee: inputs.addressee || '',
        urbanization: inputs.urbanization || '',
        candidates: inputs.candidates || 10
      },
      headers: {
        'Content-Type': 'application/json'
      }
    }).exec({
      // An unexpected error occurred.
      error: function(err) {
        return exits.error(err);
      },
      // 404 status code returned from server
      notFound: function(result) {
        var json = JSON.parse(result.body);
        return exits.error(json);
      },
      // 400 status code returned from server
      badRequest: function(result) {
        var json = JSON.parse(result.body);
        return exits.error(json);
      },
      // 403 status code returned from server
      forbidden: function(result) {
        var json = JSON.parse(result.body);
        return exits.error(json);
      },
      // 401 status code returned from server
      unauthorized: function(result) {
        var json = JSON.parse(result.body);
        return exits.error(json);
      },
      // 5xx status code returned from server (this usually means something went wrong on the other end)
      serverError: function(result) {
        var json = JSON.parse(result.body);
        return exits.error(json);
      },
      // Unexpected connection error: could not send or receive HTTP request.
      requestFailed: function() {
        return exits.error('Unexpected connection error; could not send or receive HTTP request.');
      },
      // OK.
      success: function(result) {
        var json = JSON.parse(result.body);
        return exits.success(json);
      }
    });
  }
};
